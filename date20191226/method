메소드

멤버 변수를 조작하고 처리하는 역할 
2번 이상 호출되는 로직


종류   : void , return


메소드 호출 

call by name : add(){ 	}

call by value : printdata(a);
 				값을 복사해서 사용하는것으로 원본데이터 변경 x
				파라미터의 갯수, 순서 ,타입이 일치해야한다 
				비교 ) 메소드 오버로딩 ( 다중정의 ) : 하나의 이름이지만 다양한 상황에서 동작할수있도록 허용되어 있는것 
										: 메소드의 이름은 같게 , 매개변수 타입,이름,갯수,순서를 다르게 하여 사용
				예) print(200);, print(200.5f);, print("200"); 

int[] m= { 10, 20, 30 };
call by reference :printarray(m);
				주소를 가져다 쓰므로 원본데이터 변경 ㅇ
				
				
				
생성자(Constructor)
	생성자는 클래스명과 동일하다
	객체 초기화를 목적으로 하는 메소드
	객체 생성시 초기값을 할당할수있다. (무조건 필요. jvm이 자동으로 해결)
	리턴x , void x
	생성자 생략시 jvm이 적어도 1개의 생성자는 존재하는것으로 간주한다.
	
	
	
	
명명법

1. A-a,Z-z.0-9,_,$,
2. 길이제한 ㄴ
3. 예약어 사용금지 (goto,if 등)
4. 의미있게
5. 상수는 대문자로 표기  MAX_VALUE 500

관례 
1.클래스
 -1 : 첫글자 대문자, 나머지는 소문자
 -2 : 두단어 합성어는 첫글자가 대문자  = BigData (카멜 표기법)

2.멤버변수
 -1 : 첫글자가 소문자
 -2 : 클래스와 동일 
 
3.method
 -1 : 멤버변수와 동일 
 -2 : 멤버변수와 동일
 -3 : 변수이름뒤 () 포함
 
4. 생성자
 -1 : 클래스와 동일
 -2 : 클래스와 동일
 -3 : 단어끝에 ()포함 
 
 
public

어떤 클래스에서도(다른 패키지에서도) 접근 가능

private

소속된 클래스에서만 접근 가능

default

같은 패키지 내에서 접근 가능

protected

서로다른 패키지이여도 상속을 관계인 클래스이면 접근 가능
[출처] [Java] 접근한정자|작성자 so